// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'providers/models/factures.dart';
import 'providers/models/produits.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2360489204996254451),
      name: 'Produits',
      lastPropertyId: const IdUid(7, 8440324041752619485),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 351367944271620429),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2716414840873448719),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1259811385282229177),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9135124829398034381),
            name: 'prix',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1553455528801233414),
            name: 'quantite',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8440324041752619485),
            name: 'categorieId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4592024999495649013),
            relationTarget: 'Categorie')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 6897122848000365571),
            name: 'produit',
            targetId: const IdUid(3, 2676202890803604657))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 121136297676379816),
      name: 'Categorie',
      lastPropertyId: const IdUid(4, 4356519819800870861),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2493111418332027400),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 83386755956207007),
            name: 'nom',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'produit', srcEntity: 'Produits', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 2676202890803604657),
      name: 'Facture',
      lastPropertyId: const IdUid(10, 8933413815086734163),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4959663368326036853),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 61801685852175049),
            name: 'dateHour',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3224577764614968740),
            name: 'qte',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 144382161101329286),
            name: 'pt',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7745860449600524469),
            name: 'isreduced',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8933413815086734163),
            name: 'reduction',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 571265154001836447),
            name: 'products',
            targetId: const IdUid(1, 2360489204996254451))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 2676202890803604657),
      lastIndexId: const IdUid(4, 4592024999495649013),
      lastRelationId: const IdUid(3, 6897122848000365571),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        2755844672166580766,
        4874153140241524152,
        4672075722544111126
      ],
      retiredPropertyUids: const [
        6942048403149300146,
        4216006976874805592,
        4356519819800870861,
        431882167580541495,
        624184384661803383,
        7064485952621904345,
        6317840368247832440
      ],
      retiredRelationUids: const [1430271528065913132],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Produits: EntityDefinition<Produits>(
        model: _entities[0],
        toOneRelations: (Produits object) => [object.categorie],
        toManyRelations: (Produits object) =>
            {RelInfo<Produits>.toMany(3, object.id): object.produit},
        getId: (Produits object) => object.id,
        setId: (Produits object, int id) {
          object.id = id;
        },
        objectToFB: (Produits object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final nomOffset = fbb.writeString(object.nom);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addFloat64(3, object.prix);
          fbb.addInt64(4, object.quantite);
          fbb.addInt64(6, object.categorie.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Produits(
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nom: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              prix:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              quantite:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.categorie.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.categorie.attach(store);
          InternalToManyAccess.setRelInfo<Produits>(
              object.produit, store, RelInfo<Produits>.toMany(3, object.id));
          return object;
        }),
    Categorie: EntityDefinition<Categorie>(
        model: _entities[1],
        toOneRelations: (Categorie object) => [],
        toManyRelations: (Categorie object) => {
              RelInfo<Produits>.toOneBacklink(7, object.id,
                  (Produits srcObject) => srcObject.categorie): object.produit
            },
        getId: (Categorie object) => object.id,
        setId: (Categorie object, int id) {
          object.id = id;
        },
        objectToFB: (Categorie object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Categorie(
              nom: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo<Categorie>(
              object.produit,
              store,
              RelInfo<Produits>.toOneBacklink(
                  7, object.id, (Produits srcObject) => srcObject.categorie));
          return object;
        }),
    Facture: EntityDefinition<Facture>(
        model: _entities[2],
        toOneRelations: (Facture object) => [],
        toManyRelations: (Facture object) =>
            {RelInfo<Facture>.toMany(1, object.id): object.products},
        getId: (Facture object) => object.id,
        setId: (Facture object, int id) {
          object.id = id;
        },
        objectToFB: (Facture object, fb.Builder fbb) {
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(4, object.dateHour.millisecondsSinceEpoch);
          fbb.addInt64(5, object.qte);
          fbb.addFloat64(7, object.pt);
          fbb.addBool(8, object.isreduced);
          fbb.addFloat64(9, object.reduction);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Facture(
              qte: const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              pt: const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              isreduced: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              reduction:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0),
              dateHour: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo<Facture>(
              object.products, store, RelInfo<Facture>.toMany(1, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Produits] entity fields to define ObjectBox queries.
class Produits_ {
  /// see [Produits.id]
  static final id = QueryIntegerProperty<Produits>(_entities[0].properties[0]);

  /// see [Produits.code]
  static final code = QueryStringProperty<Produits>(_entities[0].properties[1]);

  /// see [Produits.nom]
  static final nom = QueryStringProperty<Produits>(_entities[0].properties[2]);

  /// see [Produits.prix]
  static final prix = QueryDoubleProperty<Produits>(_entities[0].properties[3]);

  /// see [Produits.quantite]
  static final quantite =
      QueryIntegerProperty<Produits>(_entities[0].properties[4]);

  /// see [Produits.categorie]
  static final categorie =
      QueryRelationToOne<Produits, Categorie>(_entities[0].properties[5]);

  /// see [Produits.produit]
  static final produit =
      QueryRelationToMany<Produits, Facture>(_entities[0].relations[0]);
}

/// [Categorie] entity fields to define ObjectBox queries.
class Categorie_ {
  /// see [Categorie.id]
  static final id = QueryIntegerProperty<Categorie>(_entities[1].properties[0]);

  /// see [Categorie.nom]
  static final nom = QueryStringProperty<Categorie>(_entities[1].properties[1]);
}

/// [Facture] entity fields to define ObjectBox queries.
class Facture_ {
  /// see [Facture.id]
  static final id = QueryIntegerProperty<Facture>(_entities[2].properties[0]);

  /// see [Facture.dateHour]
  static final dateHour =
      QueryIntegerProperty<Facture>(_entities[2].properties[1]);

  /// see [Facture.qte]
  static final qte = QueryIntegerProperty<Facture>(_entities[2].properties[2]);

  /// see [Facture.pt]
  static final pt = QueryDoubleProperty<Facture>(_entities[2].properties[3]);

  /// see [Facture.isreduced]
  static final isreduced =
      QueryBooleanProperty<Facture>(_entities[2].properties[4]);

  /// see [Facture.reduction]
  static final reduction =
      QueryDoubleProperty<Facture>(_entities[2].properties[5]);

  /// see [Facture.products]
  static final products =
      QueryRelationToMany<Facture, Produits>(_entities[2].relations[0]);
}
